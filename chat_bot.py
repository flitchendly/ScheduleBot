import os
import sqlite3
import asyncio
import logging
from datetime                   import datetime, timedelta
from aiogram                    import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context        import FSMContext
from aiogram.fsm.state          import State, StatesGroup
from aiogram.filters            import Command
from aiogram.types              import BotCommand
from aiogram.client.default     import DefaultBotProperties
from aiogram.enums              import ParseMode

#–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ScheduleBot:
    def __init__(self, token):
        self.bot = Bot(
            token = token,
            default = DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.bot_storage = MemoryStorage()
        self.bot_dispatcher = Dispatcher(storage=self.bot_storage)
        self.setup_handlers()


    class AddEvent(StatesGroup):
        waiting_for_event_name = State()
        waiting_for_event_date = State()
        waiting_for_event_time = State()


    def setup_handlers(self):
        self.bot_dispatcher.message.register(self.command_start,    Command("start"))
        self.bot_dispatcher.message.register(self.command_help,     Command("help"))
        self.bot_dispatcher.message.register(self.command_schedule, Command("schedule"))
        self.bot_dispatcher.message.register(self.command_today,    Command("today"))
        self.bot_dispatcher.message.register(self.command_tomorrow, Command("tomorrow"))
        self.bot_dispatcher.message.register(self.command_week,     Command("week"))
        self.bot_dispatcher.message.register(self.command_add,      Command("add"))
        self.bot_dispatcher.message.register(self.proccess_event_name, self.AddEvent.waiting_for_event_name)
        self.bot_dispatcher.message.register(self.proccess_event_date, self.AddEvent.waiting_for_event_date)
        self.bot_dispatcher.message.register(self.proccess_event_time, self.AddEvent.waiting_for_event_time)


    async def set_commands(self):
        command_list = [
            BotCommand(command="/start",    description="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
            BotCommand(command="/help",     description="–ü–æ–º–æ—â—å"),
            BotCommand(command="/today",    description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
            BotCommand(command="/tomorrow", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
            BotCommand(command="/week",     description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"),
            BotCommand(command="/add",      description="–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"),
            BotCommand(command="/schedule", description="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        ]
        await self.bot.set_my_commands(command_list)


    async def command_start(self, message : types.message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        )


    async def command_help(self, message: types.message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        """
        help_message = (
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
            "/today - –ó–∞–Ω—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/tomorrow - –ó–∞–Ω—è—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
            "/week - –ó–∞–Ω—è—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é\n\n"
            "üÜï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π:</b>\n"
            "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n"
            "/schedule - –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n\n"
            "üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞ 1 —á–∞—Å –¥–æ —Å–æ–±—ã—Ç–∏—è\n"
        )
        await message.answer(help_message)


    async def command_schedule(self, message : types.message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        """
        now = datetime.now()
        today = now.strftime("%Y-%m-%d")
        schedule_info = (
            "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ:\n"
            "<b>1. –ë—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±:</b>\n"
            f"  /add –Ω–∞–∑–≤–∞–Ω–∏–µ {today} 18:00\n\n"
            "<b>2. –ü–æ—à–∞–≥–æ–≤—ã–π —Å–ø–æ—Å–æ–±:</b>\n"
            "  –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä:</i>\n"
            f"/add –û–ª–∏–º–ø–∏–∞–¥–∞ {today} 10:00\n"
        )
        await message.answer(schedule_info)


    async def command_today(self, message : types.message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        """
        now = datetime.now()
        today = now.strftime("%Y-%m-%d")
        current_time = now.strftime("%H:%M")
        events = self.get_events_for_date(message.from_user.id, today)

        if not events:
            await message.answer("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            return

        past_events = []
        upcoming_events = []

        for event in events:
            event_time = event[4]
            if event_time < current_time:
                past_events.append(event)
            else:
                upcoming_events.append(event)

        response = "<b>üóì  –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
        if past_events:
            response += "<i>‚úÖ –ü—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è:</i>\n"
            for event in past_events:
                response += f" {event[4]} ‚Äî {event[2]} <i>(–∑–∞–≤–µ—Ä—à–µ–Ω–æ)</i>\n"
            response += "\n"

        if upcoming_events:
            response += "<i>üïí –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è:</i>\n"
            for event in upcoming_events:
                time_left = self.calc_time_left(now, event[4])
                response += f" {event[4]} ‚Äî {event[2]} <i>({time_left})</i>\n"

        await message.answer(response)


    async def command_tomorrow(self, message : types.message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tomorrow - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        """
        tomorrow = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
        events = self.get_events_for_date(message.from_user.id, tomorrow)
        if events:
            response = "<b>üóì  –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</b>\n\n"
            for event in events:
                response += f"‚è≥ {event[4]} ‚Äî {event[2]}\n"
        else:
            await message.answer("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
            return

        await message.answer(response)


    async def command_week(self, message : types.message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /week - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é
        """
        start_date = datetime.now()
        end_date = start_date + timedelta(days=7)
        events = self.get_events_for_period(message.from_user.id, start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d"))
        if not events:
            await message.answer("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –Ω–µ–¥–µ–ª—é\n")
            return
        response = "<b>üóì  –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n"
        current_date = None

        for event in sorted(events, key=lambda x:(x[3], x[4])):
            event_date = event[3]
            if event_date != current_date:
                current_date = event_date
                response += f"<b>\n{current_date}:</b>\n"
            response += f"‚è≥ {event[4]} ‚Äî {event[2]}\n"

        await message.answer(response)


    async def command_add(self, message : types.message, state : FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        """
        add_args = message.text.split()[1:]
        if len(add_args) >= 3:
            try:
                event_name = ' '.join(add_args[:-2])
                event_date = add_args[-2]
                event_time = self.normalize_time(add_args[-1])
                datetime.strptime(event_date, '%Y-%m-%d')
                datetime.strptime(event_time, '%H:%M')

                self.save_event(message.from_user.id, event_name, event_date, event_time)
                await message.answer(
                    f"–°–æ–±—ã—Ç–∏–µ {event_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n"
                    f"–î–∞—Ç–∞:  {event_date}\n"
                    f"–í—Ä–µ–º—è: {event_time}\n"
                )
                return
            except ValueError:
                pass

        await state.set_state(self.AddEvent.waiting_for_event_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")


    @staticmethod
    def init_db():
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        db_connection = sqlite3.connect("Schedule.db")
        cursor = db_connection.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS schedule_table(
            id          INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id     INTEGER NOT NULL,
            event_name  TEXT NOT NULL,
            event_date  TEXT NOT NULL,
            event_time  TEXT NOT NULL,
            reminded    INTEGER DEFAULT 0
            )   
        ''')
        db_connection.commit()
        db_connection.close()


    def save_event(self, user_id: int, event_name: str, event_date: str, event_time: str):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        """
        db_connection = sqlite3.connect("Schedule.db")
        cursor = db_connection.cursor()

        cursor.execute(
            "INSERT INTO schedule_table (user_id, event_name, event_date, event_time) VALUES (?, ?, ?, ?)",
            (user_id, event_name, event_date, event_time)
        )
        db_connection.commit()
        db_connection.close()


    async def check_reminders(self):
        now = datetime.now()
        reminder_time = now + timedelta(hours=1)

        db_connection = sqlite3.connect('Schedule.db')
        cursor = db_connection.cursor()

        cursor.execute('''
        SELECT * FROM schedule_table 
        WHERE reminded = 0 
        AND event_date = ? 
        AND event_time BETWEEN ? AND ?
        ''', (now.strftime('%Y-%m-%d'),
              now.strftime('%H:%M'),
              reminder_time.strftime('%H:%M')))

        for event in cursor.fetchall():
            try:
                await self.bot.send_message(
                    event[1],
                    f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n–ß–µ—Ä–µ–∑ —á–∞—Å —Å–æ–±—ã—Ç–∏–µ '{event[2]}' –≤ {event[4]}"
                )
                cursor.execute('UPDATE schedule_table SET reminded = 1 WHERE id = ?', (event[0],))
                db_connection.commit()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

        db_connection.close()


    def normalize_time(self, time_str: str) -> str:
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        """
        try:
            if ":" in time_str:
                hours, minutes = time_str.split(":")
            else:
                raise ValueError("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")

            normalized = f"{int(hours):02d}:{int(minutes):02d}"
            datetime.strptime(normalized, "%H:%M")
            return normalized
        except (ValueError, AttributeError) as e:
            raise ValueError(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_str}") from e


    def get_events_for_date(self, user_id : int, date : str) -> list:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
        """
        db_connection = sqlite3.connect("Schedule.db")
        cursor = db_connection.cursor()

        cursor.execute('''
            SELECT * FROM schedule_table 
            WHERE user_id = ? AND event_date = ?
            ORDER BY event_time 
        ''', (user_id, date))
        events = cursor.fetchall()

        db_connection.close()

        return events


    def get_events_for_period(self, user_id : int, date_start : str, date_end : str) -> list:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥
        """
        db_connection = sqlite3.connect("Schedule.db")
        cursor = db_connection.cursor()

        cursor.execute('''
            SELECT * FROM schedule_table 
            WHERE user_id = ? AND event_date BETWEEN ? AND ?
            ORDER BY event_date, event_time
        ''', (user_id, date_start, date_end))
        events = cursor.fetchall()

        db_connection.close()

        return events


    async def proccess_event_name(self, message : types.Message, state : FSMContext):
        """
        –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        """
        current_date = datetime.now().strftime("%Y-%m-%d")
        if len(message.text) > 100:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        await state.update_data(event_name = message.text)
        await state.set_state(self.AddEvent.waiting_for_event_date)
        await message.answer(f"üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ì–ì–ì–ì-–ú–ú-–î–î</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, {current_date}):")


    async def proccess_event_date(self, message : types.Message, state : FSMContext):
        """
        –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è
        """
        try:
            datetime.strptime(message.text, "%Y-%m-%d")
            await state.update_data(event_date = message.text)
            await state.set_state(self.AddEvent.waiting_for_event_time)
            await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–ì–ì–ì–ì-–ú–ú-–î–î</b>")


    async def proccess_event_time(self, message : types.Message, state : FSMContext):
        """
        –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è
        """
        try:
            datetime.strptime(message.text, "%H:%M")
            data = await state.get_data()
            normalize_time = self.normalize_time(message.text)

            self.save_event(
                user_id=message.from_user.id,
                event_name=data["event_name"],
                event_date=data["event_date"],
                event_time=normalize_time
            )

            await message.answer(
                f"–°–æ–±—ã—Ç–∏–µ <b>'{data['event_name']}'</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                f"–î–∞—Ç–∞: <b>{data['event_date']}</b>\n"
                f"–í—Ä–µ–º—è: <b>{message.text}</b>"
            )
            await state.clear()

        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–ß–ß:–ú–ú</b>")


    def calc_time_left(self, now : datetime, event_time : str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        """
        event_datetime = datetime.strptime(event_time, "%H:%M")
        delta = timedelta(hours=event_datetime.hour - now.hour, minutes=event_datetime.minute - now.minute)
        if delta.total_seconds() <= 0:
            return "–°–µ–π—á–∞—Å"
        hours, reminder = divmod(delta.seconds, 3600)
        minutes = reminder // 60

        if hours > 0:
            return f"—á–µ—Ä–µ–∑ {hours} —á. {minutes} –º–∏–Ω."
        else:
            return f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω."


    async def run(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        """
        self.init_db()
        await self.set_commands()

        async def scheduler():
            while True:
                await self.check_reminders()
                await asyncio.sleep(60)

        asyncio.create_task(scheduler())
        await self.bot_dispatcher.start_polling(self.bot)


ACCESS_TOKEN = "7834222412:AAEid2-JgISz0VS6xD9QONh_F9kdWNfSo9M"

if __name__ == "__main__":
    bot = ScheduleBot(ACCESS_TOKEN)
    asyncio.run(bot.run())
