import os
from datetime import datetime, timedelta

from aiogram                    import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context        import FSMContext
from aiogram.fsm.state          import State, StatesGroup
from aiogram.filters            import Command
from aiogram.types              import BotCommand
from aiogram.client.default     import DefaultBotProperties
from aiogram.enums              import ParseMode


import sqlite3
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –¥–ª—è Telegram API
ACCESS_TOKEN = "7834222412:AAEid2-JgISz0VS6xD9QONh_F9kdWNfSo9M"


class SchedulerBot:
    def __init__(self, token):
        self.bot = Bot(
            token = token,#ACCESS_TOKEN,
            default = DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.bot_storage = MemoryStorage()
        self.bot_dispatcher = Dispatcher()
        self.setup_handlers()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FSM
    class AddEvent(StatesGroup):
        waiting_for_event_name = State()
        waiting_for_event_date = State()
        waiting_for_event_time = State()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    def setup_handlers(self):
        self.bot_dispatcher.message.register(self.command_start, Command("start"))
        self.bot_dispatcher.message.register(self.command_help, Command("help"))
        self.bot_dispatcher.message.register(self.command_schedule, Command("schedule"))
        self.bot_dispatcher.message.register(self.command_today, Command("today"))
        self.bot_dispatcher.message.register(self.command_tomorrow, Command("tomorrow"))
        self.bot_dispatcher.message.register(self.command_week, Command("week"))
        self.bot_dispatcher.message.register(self.command_add, Command("add"))
        self.bot_dispatcher.message.register(self.proccess_event_name, self.AddEvent.waiting_for_event_name)
        self.bot_dispatcher.message.register(self.proccess_event_date, self.AddEvent.waiting_for_event_date)
        self.bot_dispatcher.message.register(self.proccess_event_time, self.AddEvent.waiting_for_event_time)
        #–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö

    async def set_commands(self):
        command_list = [
            BotCommand(command="/start", description="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
            BotCommand(command="/help", description="–ü–æ–º–æ—â—å"),
            BotCommand(command="/today", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
            BotCommand(command="/tomorrow", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
            BotCommand(command="/week", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"),
            BotCommand(command="/add", description="–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"),
            BotCommand(command="/schedule", description="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        ]
        await self.bot.set_my_commands(command_list)

    async def command_start(self, message : types.message):
        """

        :param message:
        :return:
        """
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        )

    async def command_help(self, message: types.message):
        """

        :param message:
        :return:
        """
        help_message = (
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
            "/today - –ó–∞–Ω—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/tomorrow - –ó–∞–Ω—è—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
            "/week - –ó–∞–Ω—è—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é\n\n"
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π:\n"
            "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n"
            "/schedule - –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n\n"
            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞ 1 —á–∞—Å –¥–æ —Å–æ–±—ã—Ç–∏—è\n"
            "–ö–æ–Ω–µ—Ü"
        )
        await message.answer(help_message)

    async def command_schedule(self, message : types.message):
        """

        :param message:
        :return:
        """
        schedule_info = (
            "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ:\n"
            "1. –ë—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±:\n"
            "\n/add –Ω–∞–∑–≤–∞–Ω–∏–µ 2025-07-13 18:00\n"
            "2. –ü–æ—à–∞–≥–æ–≤—ã–π —Å–ø–æ—Å–æ–±:\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/add deadline –ø–æ —Ç–∑ 2025-07-14 10:00\n"
        )
        await message.answer(schedule_info)





    async def command_today(self, message : types.message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        :param message:
        :return:
        """
        now = datetime.now()
        today = now.strftime("%Y-%m-%d")
        current_time = now.strftime("%H:%M")
        events = self.get_events_for_date(message.from_user.id, today)

        if not events:
            await message.answer("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            return

        past_events = []
        upcoming_events = []

        for event in events:
            event_time = event[4]
            if event_time < current_time:
                past_events.append(event)
            else:
                upcoming_events.append(event)

        response = "<b>üóì  –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
        if past_events:
            response += "<i>‚úÖ –ü—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è:</i>\n"
            for event in past_events:
                response += f" {event[4]} ‚Äî {event[2]} <i>(–∑–∞–≤–µ—Ä—à–µ–Ω–æ)</i>\n"
            response += "\n"

        if upcoming_events:
            response += "<i>üïí –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è:</i>\n"
            for event in upcoming_events:
                time_left = self.calc_time_left(now, event[4])
                response += f" {event[4]} ‚Äî {event[2]} <i>({time_left})</i>\n"

        await message.answer(response)


    async def command_tomorrow(self, message : types.message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tomorrow - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        :param message:
        :return:
        """
        tomorrow = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
        events = self.get_events_for_date(message.from_user.id, tomorrow)
        if events:
            response = "<b>üóì  –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</b>\n\n"
            for event in events:
                response += f"XX {event[4]} ‚Äî {event[2]}\n"
        else:
            await message.answer("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
            return

        await message.answer(response)


    async def command_week(self, message : types.message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /week - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é
        :param message:
        :return:
        """
        start_date = datetime.now()
        end_date = start_date + timedelta(days=7)
        events = self.get_events_for_period(message.from_user.id, start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d"))
        if not events:
            await message.answer("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –Ω–µ–¥–µ–ª—é\n")
            return
        response = "<b>üóì  –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n"
        current_date = None
        first_day = True

        for event in sorted(events, key=lambda x:(x[3], x[4])):
            event_date = event[3]
            if event_date != current_date:
                current_date = event_date
                if not first_day:
                    response += "\n"
                else:
                    first_day = False
                response += f"<b>\n{current_date}:</b>\n"
            response += f"X {event[4]} ‚Äî {event[2]}"

        await message.answer(response)


    async def command_add(self, message : types.message, state : FSMContext):
        """

        :param message:
        :return:
        """
        add_args = message.text.split()[1:]
        if len(add_args) >= 3:
            try:
                event_name = ' '.join(add_args[:-2])
                event_date = add_args[-2]
                event_time = add_args[-1]
                datetime.strptime(event_date, '%Y-%m-%d')
                datetime.strptime(event_time, '%H:%M')

                self.save_event(message.from_user.id, event_name, event_date, event_time)
                await message.answer(
                    f"–°–æ–±—ã—Ç–∏–µ {event_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n"
                    f"–î–∞—Ç–∞:  {event_date}\n"
                    f"–í—Ä–µ–º—è: {event_time}\n"
                )
                return
            except ValueError:
                pass

        await state.set_state(self.AddEvent.waiting_for_event_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")


    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
    @staticmethod
    def init_db():
        db_connection = sqlite3.connect("Schedule.db")
        cursor = db_connection.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS schedule_table(
            id          INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id     INTEGER NOT NULL,
            event_name  TEXT NOT NULL,
            event_date  TEXT NOT NULL,
            event_time  TEXT NOT NULL,
            reminded    INTEGER DEFAULT 0
            )   
        ''')
        db_connection.commit()
        db_connection.close()


    def save_event(self, user_id: int, event_name: str, event_date: str, event_time: str):
        '''

        :param user_id:
        :param event_name:
        :param event_date:
        :param event_time:
        :return:
        '''
        db_connection = sqlite3.connect("Schedule.db")
        cursor = db_connection.cursor()

        cursor.execute(
            "INSERT INTO schedule_table (user_id, event_name, event_date, event_time) VALUES (?, ?, ?, ?)",
            (user_id, event_name, event_date, event_time)
        )
        db_connection.commit()
        db_connection.close()


#-----------------------------------------------------------------------------------------------------------------------

    async def check_reminders(self):
        now = datetime.now()
        db_connection = sqlite3.connect('schedule.db')
        cursor = db_connection.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ:
        # 1. –ï—â–µ –Ω–µ –±—ã–ª–∏ –Ω–∞–ø–æ–º–Ω–µ–Ω—ã (reminded = 0)
        # 2. –î–æ–ª–∂–Ω—ã –Ω–∞—á–∞—Ç—å—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ 1 —á–∞—Å 10 –º–∏–Ω—É—Ç
        cursor.execute('''
        SELECT * FROM schedule_table 
        WHERE reminded = 0 
        AND event_date = ?
        AND event_time BETWEEN ? AND ?
        ORDER BY event_time
        ''', (
            now.strftime('%Y-%m-%d'),
            now.strftime('%H:%M'),
            (now + timedelta(minutes=70)).strftime('%H:%M')  # +1—á10–º–∏–Ω
        ))

        for event in cursor.fetchall():
            event_time = datetime.strptime(event[4], '%H:%M').time()
            time_diff = (datetime.combine(now.date(), event_time) - now).total_seconds() / 60

            if 60 >= time_diff > 10:  # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å
                await self.send_reminder(event,"–ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ —Å–æ–±—ã—Ç–∏–µ - ")
                cursor.execute('UPDATE schedule_table SET reminded = 1 WHERE id = ?', (event[0],))

            elif 10 >= time_diff > 0:  # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 10 –º–∏–Ω—É—Ç
                await self.send_reminder(event,"–ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ —Å–æ–±—ã—Ç–∏–µ - ")
                cursor.execute('UPDATE schedule_table SET reminded = 1 WHERE id = ?', (event[0],))

        db_connection.commit()
        db_connection.close()

    async def send_reminder(self, event, time_left):
        try:
            await self.bot.send_message(
                event[1],
                f"<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n{time_left} '{event[2]}' –≤ {event[4]}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


    def get_events_for_date(self, user_id : int, date : str) -> list:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
        :param user_id:
        :param date:
        :return:
        """
        db_connection = sqlite3.connect("Schedule.db")
        cursor = db_connection.cursor()

        cursor.execute('''
            SELECT * FROM schedule_table 
            WHERE user_id = ? AND event_date = ?
            ORDER BY event_time 
        ''', (user_id, date))
        events = cursor.fetchall()

        db_connection.close()

        return events

    def get_events_for_period(self, user_id : int, date_start : str, date_end : str) -> list:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥
        :param user_id:
        :param date:
        :return:
        """
        db_connection = sqlite3.connect("Schedule.db")
        cursor = db_connection.cursor()

        cursor.execute('''
            SELECT * FROM schedule_table 
            WHERE user_id = ? AND event_date BETWEEN ? AND ?
            ORDER BY event_date, event_time
        ''', (user_id, date_start, date_end))
        events = cursor.fetchall()

        db_connection.close()

        return events

    async def proccess_event_name(self, message : types.Message, state : FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        :param message:
        :param state:
        :return:
        """
        current_date = datetime.now().strftime("%Y-%m-%d")
        if len(message.text) > 100:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        await state.update_data(event_name = message.text)
        await state.set_state(self.AddEvent.waiting_for_event_date)
        await message.answer(f"X –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ì–ì–ì–ì-–ú–ú-–î–î</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, {current_date}):")

    async def proccess_event_date(self, message : types.Message, state : FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è
        :param message:
        :param state:
        :return:
        """
        try:
            datetime.strptime(message.text, "%Y-%m-%d")
            await state.update_data(event_date = message.text)
            await state.set_state(self.AddEvent.waiting_for_event_time)
            await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–ì–ì–ì–ì-–ú–ú-–î–î</b>")


    async def proccess_event_time(self, message : types.Message, state : FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è
        :param message:
        :param state:
        :return:
        """
        try:
            datetime.strptime(message.text, "%H:%M")
            data = await state.get_data()

            self.save_event(
                user_id=message.from_user.id,
                event_name=data["event_name"],
                event_date=data["event_date"],
                event_time=message.text
            )

            await message.answer(
                f"–°–æ–±—ã—Ç–∏–µ <b>'{data['event_name']}'</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                f"–î–∞—Ç–∞: <b>{data['event_date']}</b>\n"
                f"–í—Ä–µ–º—è: <b>{message.text}</b>"
            )
            await state.clear()

        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–ß–ß:–ú–ú</b>")

    def calc_time_left(self, now : datetime, event_time : str) -> str:
        """

        :param now:
        :param event_time:
        :return:
        """
        event_datetime = datetime.strptime(event_time, "%H:%M")
        delta = timedelta(hours=event_datetime.hour - now.hour, minutes=event_datetime.minute - now.minute)
        if delta.total_seconds() <= 0:
            return "–°–µ–π—á–∞—Å"
        hours, reminder = divmod(delta.seconds, 3600)
        minutes = reminder // 60

        if hours > 0:
            return f"—á–µ—Ä–µ–∑ {hours} —á. {minutes} –º–∏–Ω."
        else:
            return f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω."


    async def run(self):
        self.init_db()
        await self.set_commands()

        async def scheduler():
            while True:
                await self.check_reminders() #—Ä–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–æ—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await asyncio.sleep(60)

        asyncio.create_task(scheduler())
        await self.bot_dispatcher.start_polling(self.bot)



if __name__ == "__main__":
    bot = SchedulerBot(ACCESS_TOKEN)
    asyncio.run(bot.run())
